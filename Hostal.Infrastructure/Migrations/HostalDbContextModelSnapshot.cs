// <auto-generated />
using System;
using Hostal.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hostal.Infrastructure.Migrations
{
    [DbContext(typeof(HostalDbContext))]
    partial class HostalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.19");

            modelBuilder.Entity("Hostal.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("CI")
                        .HasComment("Carnet de Identidad - 11 digit national identification number");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("Email")
                        .HasComment("Client's email address for communication and reservations");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive")
                        .HasComment("Soft delete flag - true means active, false means deleted");

                    b.Property<bool>("IsVip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsVip")
                        .HasComment("Indicates if the client has VIP status for special benefits");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LastName")
                        .HasComment("Last name of the person");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name")
                        .HasComment("First name of the person");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone")
                        .HasComment("Contact phone number");

                    b.HasKey("Id");

                    b.HasIndex("CI")
                        .IsUnique()
                        .HasDatabaseName("IX_Clients_CI")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Clients_Email")
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Phone")
                        .HasDatabaseName("IX_Client_Phone");

                    b.HasIndex("Name", "LastName")
                        .HasDatabaseName("IX_Client_FullName");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Hostal.Domain.Entities.HeadHousekeeper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("CI")
                        .HasComment("Carnet de Identidad - 11 digit national identification number");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive")
                        .HasComment("Soft delete flag - true means active, false means deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LastName")
                        .HasComment("Last name of the person");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name")
                        .HasComment("First name of the person");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone")
                        .HasComment("Contact phone number");

                    b.HasKey("Id");

                    b.HasIndex("Phone")
                        .HasDatabaseName("IX_HeadHousekeeper_Phone");

                    b.HasIndex("Name", "LastName")
                        .HasDatabaseName("IX_HeadHousekeeper_FullName");

                    b.ToTable("HeadHousekeepers", (string)null);
                });

            modelBuilder.Entity("Hostal.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("FechaCancelacion")
                        .HasComment("Fecha en que se canceló la reserva. Nulo si no está cancelada.");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("MotivoCancelacion")
                        .HasComment("Motivo especificado por el cual se canceló la reserva.");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDateReservation")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("FechaSalida")
                        .HasComment("Fecha de fin de la estancia del cliente.");

                    b.Property<bool>("IsCanceled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("EstaCancelada")
                        .HasComment("Indica si la reserva fue cancelada (true) o no (false).");

                    b.Property<bool>("IsClientInHostel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("EstaElClienteEnHostal")
                        .HasComment("Indica si el cliente ha realizado el check-in (true) o no (false).");

                    b.Property<DateTime>("ReservationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasColumnName("FechaReservacion")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Fecha en que se realizó la reserva.");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDateReservation")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("FechaEntrada")
                        .HasComment("Fecha de inicio de la estancia del cliente.");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("ImporteRenta")
                        .HasComment("Costo total de la reserva.");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("IX_Reservations_ClientId");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_Reservations_RoomId");

                    b.HasIndex("StartDateReservation", "EndDateReservation")
                        .HasDatabaseName("IX_Reservations_DateRange");

                    b.ToTable("Reservations", null, t =>
                        {
                            t.HasCheckConstraint("CK_Reservation_AmountPositive", "[ImporteRenta] >= 0");

                            t.HasCheckConstraint("CK_Reservation_DateOrder", "[FechaSalida] > [FechaEntrada]");
                        });
                });

            modelBuilder.Entity("Hostal.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("Capacity")
                        .HasComment("Maximum number of occupants the room can accommodate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive")
                        .HasComment("Soft delete flag - true means active, false means deleted");

                    b.Property<bool>("IsOutOfService")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Number")
                        .HasComment("Room number following format 0XY where X is floor (1-3) and Y is room number (1-5)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasDatabaseName("IX_Rooms_Number");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("Hostal.Domain.Entities.RoomHeadHousekeeper", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeadHousekeeperId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("RoomId", "HeadHousekeeperId");

                    b.HasIndex("HeadHousekeeperId")
                        .HasDatabaseName("IX_RoomHeadHousekeepers_HeadHousekeeperId");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_RoomHeadHousekeepers_RoomId");

                    b.ToTable("RoomHeadHousekeepers", (string)null);
                });

            modelBuilder.Entity("Hostal.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Hostal.Domain.Entities.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Reservations_Client");

                    b.HasOne("Hostal.Domain.Entities.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Reservations_Room");

                    b.Navigation("Client");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Hostal.Domain.Entities.RoomHeadHousekeeper", b =>
                {
                    b.HasOne("Hostal.Domain.Entities.HeadHousekeeper", "HeadHousekeeper")
                        .WithMany("RoomHeadHousekeepers")
                        .HasForeignKey("HeadHousekeeperId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hostal.Domain.Entities.Room", "Room")
                        .WithMany("RoomHeadHousekeepers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HeadHousekeeper");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Hostal.Domain.Entities.Client", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Hostal.Domain.Entities.HeadHousekeeper", b =>
                {
                    b.Navigation("RoomHeadHousekeepers");
                });

            modelBuilder.Entity("Hostal.Domain.Entities.Room", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("RoomHeadHousekeepers");
                });
#pragma warning restore 612, 618
        }
    }
}
